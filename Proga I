#include <iostream> // and system("pause")
#include <cmath> //математика
#include <cassert> //для дропа, если что
#include <utility> //для exchange
#include <vector>
//#include <windows.h>
#include <locale>
using namespace std;

#define PI 3.14159265358979323846

class CFigure;
class CPoint;
class CPolyLine;
class Ccycle_polyline;
class Cpolygon;
class Ctriangle;
class Ctrapezoid;
class Cclear_polygon;

class Cparallelogram;
class CRhombus;
//мы длжны постоянно помнить, что надо сохранять инвариантность, следовательно не надо создавать плохие объекты     ok
//еще надо допилить универсальные конструкторы      ok
//и сделать проверки в собственных конструкторах     ok

//а еще надо бы сделать 9) Создать еще что-будь            !!!!!!!!!!!!!!!!!!!
//и в начале выбор на 1) создать  2) посмотреть на чадо

//надо отвязатся от консольки (сначла вводим точки, а потом пихаем их в вектор и в кажом классе можно этот вектор принимать)     ок   
//и еще надо перенести периметр и площадь в классы соответвующие и сдлать их виртуальными (для того, чтбы для потомков тоде работало)     ok
//и просто еще допилить, чтобы все ок было        ок
//а, еще надо подкорректировать == и сделать ретурн в проверке вместо исключений      ок
//и еще надо в исключениях сделать класс ексепшн, чтобы было по кайфу        ok

//не виртуальные ф-ии в фигуре     ok
//константные ссылки    ok
//кодстайл      
//исключения не ловить(или в мейне)     ok

class CStorage
{
public:
    vector <CPoint> VPoints;
    vector <CFigure> VFigures;
    vector <CPolyLine> VPolylines;
    vector <Ccycle_polyline> VCycle_polylines;
    vector <Cpolygon> VPolygones;
    vector <Ctriangle> VTriangles;
    vector <Cparallelogram> Vparallelogrames;
    vector <Ctrapezoid> VTrapezoids;
    vector <Cclear_polygon> VClear_polygones;
    vector <CRhombus> VRhombuses;

    ~CStorage()
    {
        VPoints.clear();  VTriangles.clear();
        VFigures.clear();  Vparallelogrames.clear();
        VPolylines.clear();  VTrapezoids.clear();
        VCycle_polylines.clear();  VClear_polygones.clear();
        VPolygones.clear();  VRhombuses.clear();

    }
};

class CPoint // точка
{
private:
    int X_ = 0;
    int Y_ = 0;
public:
    CPoint(int x, int y) : X_(x), Y_(y) {}// обычный конструктор
    CPoint() : X_(0), Y_(0) {}
    CPoint(const vector <CPoint>& vpoints) :
        X_(vpoints.front().X_), Y_(vpoints.front().Y_) { Find_P(); Find_S(); } //конструктор по множеству точек
    CPoint(const CPoint& another) : // конструктор копирования
        X_(another.X_), Y_(another.Y_)
    {}
    CPoint(CPoint&& another) noexcept : // конструктор перемещения
        X_(exchange(another.X_, 0)), Y_(exchange(another.Y_, 0))
    {}

    void SetPoint() // Set
    {
        int x, y;
        cout << "Point ("; cin >> x;
        cout << ";"; cin >> y;
        cout << ")" << endl;
        Set_XY(x, y);
    }

    int Get_X() { return X_; }
    int Get_Y() { return Y_; }
    void Set_XY(int x, int y)
    {
        X_ = x;
        Y_ = y;
    }


    void GetPoint() { cout << "Point (" << X_ << ";" << Y_ << ")" << endl; }

    CPoint& operator= (const CPoint& another) // оператор =
    {
        if (&another == this)
            return *this;

        X_ = another.X_;
        Y_ = another.Y_;

        return *this;
    }

    friend bool operator== (const CPoint& another, const CPoint& that)
    {
        return ((another.X_ == that.X_) && (another.Y_ == that.Y_));
    }

    friend istream& operator>> (istream& indata, CPoint point)
    {
        int x, y;
        cout << "Point: "; indata >> x >> y;
        point.Set_XY(x, y);
        return indata;
    }

    void Find_P() { cout << "P.. Уау! Вы получили ничего! Вы прогрессируете дальше!" << endl; }
    void Find_S() { cout << "S.. Невозможно! Вы получили ничего! Ваш прогресс не знает пределов!" << endl; }
    
    ~CPoint() {}
};
class CFigure {
private:
    vector <CPoint> points_;
    vector <CPoint> sides_;
public:
    CPoint Get_point(const int i) { return points_[i]; }
    CPoint Get_side(const int i) { return sides_[i]; }
    vector <CPoint> Get_All_points() { return points_; }
    vector <CPoint> Get_All_sides() { return sides_; }
    int Get_size() { return sides_.size(); }
    void Set_point(const CPoint point) { points_.push_back(point); }
    void Set_side(const CPoint side) { sides_.push_back(side); }

    CFigure() {}
    CFigure(const vector <CPoint>& PlentyOfPoints)
    {
        SetFigure(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }

    void SetFigure(const vector <CPoint>& PlentyOfPoints) { points_ = PlentyOfPoints; }

    bool Check_for_cycle() { return ((Get_point(0).Get_X() == Get_point(Get_size() - 1).Get_X()) && (Get_point(0).Get_Y() == Get_point(Get_size() - 1).Get_Y())); }
    //true - yes   false - no
    bool Check_for_convexity()
    {
            if (!(Check_for_cycle()))
                throw exception("Sorry, but this polyline not cycle!");

            int X1, X2, Y1, Y2, X, Y;
            int help_turn = 0;
            int count = 0 - sides_.size();

            for (unsigned int i = 0; i < sides_.size() - 1; i++)
            {
                X1 = points_.at(i).Get_X();      Y1 = points_.at(i).Get_Y();      //мы берем координаты у точек
                X2 = points_.at(i + 1).Get_X();  Y2 = points_.at(i + 1).Get_Y();
                X = X2 - X1; Y = Y2 - Y1; //считаем координаты у ребра
                sides_.at(i).Set_XY(X, Y); //кладем координаты ребер как координаты точек в вспомогательный массив
            }
            X1 = points_.at(sides_.size() - 1).Get_X();      Y1 = points_.at(sides_.size() - 1).Get_Y(); //тут мы делаем то же самое, просто последний раз, вручную, ибо иначе мы бы вышли за пределы
            X2 = points_.at(0).Get_X();                      Y2 = points_.at(0).Get_Y();
            X = X2 - X1; Y = Y2 - Y1;
            sides_.at(sides_.size()).Set_XY(X, Y); //ребра запонены

            for (int i = 0; i < Get_size() - 1; i++) //проверяем выпуклость с помощью поворотов
            {
                X1 = sides_.at(i).Get_X();      Y1 = sides_.at(i).Get_Y();      //мы берем точки уже у ребер
                X2 = sides_.at(i + 1).Get_X();  Y2 = sides_.at(i + 1).Get_Y();
                help_turn = (X1 * Y2 - Y1 * X2); //формула поворота, >0, когда поворот налево; <0 - направо; =0 - коллинеарны
                if (help_turn < 0)
                {
                    count++; //будем по умолчанию обходить слева, таким образом если все ок, то в конце quantity = 0, а иначе все плохо
                }
            }

            return (count < 0);
    }
    //false - ok     true - не выпуклый или не замкнутый 
    bool Check_for_ideal()
    {
        for (unsigned int i = 0; i < sides_.size() - 1; i++)
        {
            if (!((sides_.at(i).Get_X() == sides_.at(i + 1).Get_X()) && (sides_.at(i).Get_Y() == sides_.at(i + 1).Get_Y()))) { return false; }
        }
        return true;
    }
    //true - yes     false - no

    double Find_side(CPoint first, CPoint second)
    { return sqrt((second.Get_X() - first.Get_X()) ^ 2 + (second.Get_Y() - first.Get_X())^2); }
    double Find_k(CPoint first, CPoint second)
    { return ((second.Get_Y() - first.Get_Y()) / (second.Get_X() - first.Get_X())); }

    virtual double Find_S()
    {
        double X1, X2, Y1, Y2;
        double S;
        double s1 = 0, s2 = 0;
        for (unsigned int i = 0; i < points_.size() - 1; i++)
        {
            X1 = points_.at(i).Get_X();      Y1 = points_.at(i).Get_Y();
            X2 = points_.at(i + 1).Get_X();  Y2 = points_.at(i + 1).Get_Y();
            s1 += X1 * Y2;
            s2 += Y1 * X2;
        }
        S = ((s1 - s2) / 2);
        return S;
    }
    virtual double Find_P()
    {
        int X1, X2, Y1, Y2;
        double P = 0;
        for (unsigned int i = 0; i < points_.size() - 1; i++)
        {
            X1 = points_.at(i).Get_X();     Y1 = points_.at(i).Get_Y();
            X2 = points_.at(i + 1).Get_X(); Y2 = points_.at(i + 1).Get_Y();
            P += sqrt(((X2 - X1) ^ 2) + ((Y2 - Y1) ^ 2));
        }
        return P;
    }
    //virtual double Find_R() {}//////////////////////////**************************************************************************
    //virtual double Find_r() {} //////////////////////////**************************************************************************
};


class CPolyLine : public CFigure // ломаная
{
private:
public:
    CPolyLine() {}
    CPolyLine(const vector <CPoint>& PlentyOfPoints) { SetPolyLine(PlentyOfPoints); }

    void SetPolyLine(const vector <CPoint>& PlentyOfPoints)
    {
        SetFigure(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S(0) << endl;
    }

    void GetPolyLine()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    const char* Find_S(const int&) { return "Невероятно! Путем своих усилий вы достигли ничего! Ваш прогресс вам аплодирует!"; }

    ~CPolyLine() { Get_All_points().clear(); }
};
class Ccycle_polyline : public CFigure // замкнутая ломаная
{
private:
public:
    Ccycle_polyline() {}
    Ccycle_polyline(const vector <CPoint>& PlentyOfPoints)
    {
        if (!(Check_for_cycle()))
            throw exception("Sorry, but this polyline not cycle");
   
        SetCyclePolyline(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }

    void SetCyclePolyline(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetCyclePolyLine()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    ~Ccycle_polyline()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class Cpolygon : public CFigure // многоугольник выпуклый
{
private:
public:
    Cpolygon() {}
    Cpolygon(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Sorry, but it's not a convexity polygon");

        SetPolygon(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }

    void SetPolygon(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetPolygon()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    ~Cpolygon()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class Ctriangle : public Cpolygon// треугольник
{
private:
public:
    Ctriangle() {}
    Ctriangle(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Sorry, but it's not a convexity triangle");
        if (!(Check_for_real_triangle()))
            throw exception("Нашим рабам не удалось получить идеально треугольную пирамиду - нужно больше золота. Народ любит вас, сир!");

        SetPolygon(PlentyOfPoints);
        cout << "За вами кто-то следит....." << endl;
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }
    void SetTriangle(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetTriangle()
    {
        for (int i = 0; i < 3; i++)
            Get_point(i).GetPoint();
    }
    


    bool Check_for_real_triangle() //каждая из сторон треугольника должна быть меньше, чем сумма двух других
    {
        return(
               (Find_side(Get_point(0), Get_point(1)) < (Find_side(Get_point(1), Get_point(2)) + Find_side(Get_point(2), Get_point(0))))
            && (Find_side(Get_point(1), Get_point(2)) < (Find_side(Get_point(0), Get_point(1)) + Find_side(Get_point(2), Get_point(0))))
            && (Find_side(Get_point(2), Get_point(0)) < (Find_side(Get_point(0), Get_point(1)) + Find_side(Get_point(1), Get_point(2)))));
    }

    ~Ctriangle()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class Ctrapezoid : public CFigure // трапеция
{
private:
public:
    // (можно еще и на 90)
    Ctrapezoid() {}
    Ctrapezoid(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Мир и ровные пацанчики спасены, ведь вы предотвратили рождение ТРАПА!");
        if (!(Check_for_real_trapezoid()))
            throw exception("Мир и ровные пацанчики спасены, ведь вам показалось, что это ТРАП");

        SetTrapezoid(PlentyOfPoints);
        cout << "P = " << Find_P() << "  and  S = " << Find_S() << endl;
    }

    bool Check_for_real_trapezoid()
    {
        return(
               ((Find_k(Get_point(0), Get_point(1)) == Find_k(Get_point(2), Get_point(3)))
            && (Find_k(Get_point(1), Get_point(2)) != Find_k(Get_point(3), Get_point(0))))
        ||
               ((Find_k(Get_point(1), Get_point(2)) == Find_k(Get_point(3), Get_point(0)))
            && (Find_k(Get_point(0), Get_point(1)) != Find_k(Get_point(2), Get_point(3)))));
    }


    void SetTrapezoid(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetTrapezoid()
    {
        for (int i = 0; i < 4; i++)
            Get_point(i).GetPoint();
    }

    ~Ctrapezoid()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class Cclear_polygon : public Cpolygon // правильный многоугольник
{
private:
public:
    Cclear_polygon() {}
    Cclear_polygon(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Sorry, but it's not a convexity polygon");
        if (!(Check_for_ideal()))
            throw exception("Вся симметричность и справедливость всего мироздания, в котором мы так преисполнились, впрочем как и адекватность, безвозвратно утеряна....");

        SetClearPolygon(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << this->Find_S() << endl;
    }

    void SetClearPolygon(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    /*
    void SetClearPolygon(vector <CPoint> PlentyOfPoints) // "хорошее" построение многоугольника
    {
        double alpha = (2 * PI) / PlentyOfPoints.size(); //наш угол
        double x, y;
        for (int i = 0; i < PlentyOfPoints.size(); i++)
        {
            x = Centre_X + R * sin(i * alpha); //где Сentre - координаты центра правильног омногоугольника (если мы в начале координат, то Центр Х У = 0), R - радиус (опис. окр.)
            y = Centre_Y + R * sin(i * alpha); //строим, начиная с PI/2(сверху)
            Get_point(i).Set_XY(x, y);
        }
    }
    */
    void GetClearPolygon()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    double Find_S()
    { return (Find_side(Get_point(0), Get_point(1)) * Get_All_points().size()); }

    ~Cclear_polygon()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class Cparallelogram : public Cpolygon
{
private:
public:
    Cparallelogram() {}
    Cparallelogram(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Sorry, but it's not a convexity polygon");
        if (!(Check_for_real_parallelogram()))
            throw exception("Жаль, но нам не удалось закинуться ПАРОй ГРАМм кокоса(");

        SetParallelogram(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }

    void SetParallelogram(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetParallelogram()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    bool Check_for_real_parallelogram()
    {
        return(
               ((Find_k(Get_point(0), Get_point(1)) == Find_k(Get_point(2), Get_point(3))) // попарная ||
             && (Find_k(Get_point(1), Get_point(2)) == Find_k(Get_point(3), Get_point(0)))));
    }
    ~Cparallelogram()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};
class CRhombus : public Cparallelogram
{
private:
public:
    CRhombus() {}
    CRhombus(const vector <CPoint>& PlentyOfPoints)
    {
        if (Check_for_convexity())
            throw exception("Sorry, but it's not a convexity polygon");
        if (!(Check_for_real_rhombus))
            throw exception("Константин Воронин-в-попе-макаронин не создал ромб: в попе тромб...");

        SetParallelogram(PlentyOfPoints);
        cout << "P = " << Find_P() << " and  S = " << Find_S() << endl;
    }

    void SetRhombus(const vector <CPoint>& PlentyOfPoints) { SetFigure(PlentyOfPoints); }
    void GetRhombus()
    {
        for (int i = 0; i < Get_size(); i++)
            Get_point(i).GetPoint();
    }

    bool Check_for_real_rhombus()
    {
        return(
            (Check_for_real_parallelogram) && // ||and||
            ((Find_side(Get_point(0), Get_point(1)) == Find_side(Get_point(1), Get_point(2)))
                && (Find_side(Get_point(0), Get_point(1)) == Find_side(Get_point(2), Get_point(3)))
                && (Find_side(Get_point(0), Get_point(1)) == Find_side(Get_point(3), Get_point(0)))));
    }               // а тут 1 сторона должна равняться 2, 3 и 4 одновременно

    ~CRhombus()
    {
        Get_All_points().clear();
        Get_All_sides().clear();
    }
};




vector <CPoint> AskForCreate(vector <CPoint> PlentyOfPoints)
{

    cout << endl << "Пожалуйста, вводите точки, из которых хотите воплощать свои геометрические мечты в реальность:  (для того, чтобы остановиться, нажмите 'ё'" << endl;
    CPoint start_point;

    for (CPoint start_point; ((cin.peek() != '`') || (cin.peek() != 'ё')) && cin >> start_point;)
    {
        PlentyOfPoints.push_back(start_point);
    }

    if (PlentyOfPoints.size() < 0)
    {
        throw exception("Ну, тут наши полномочия всё, окончены...");
    }
    else if (PlentyOfPoints.size() == 0)
    {
        throw exception("Поздравляем! Вы сделали абсолютно ничего, это успех! Вы прогрессируете!");
    }

    cout << "из этих точек вы можете сотворить: " << endl << "0) Ничего не хочу." << endl;;
    if (PlentyOfPoints.size() == 1) cout << "1) Точку. Просто одинокую точку...   хнык(   " << endl;
    if (PlentyOfPoints.size() > 1)  cout << "1) Ломаную." << endl;                                    //если захотим 2(или более) отдельных точки, то дульки с маком
    if (PlentyOfPoints.size() > 3)  cout << "2) Замкнутую ломаную." << endl << "3) Многоугольник." << endl << "4) Правильный многоугольник." << endl;
    switch (PlentyOfPoints.size())
    {
    case 3:
    {
        cout << "2)               Илюминатиии" << endl << "3)  Идельного илюминатии" << endl;
    }
    case 4:
        cout << "5) Трапецию." << endl << "6) Параллелограмм." << endl << "7) Ромб." << endl;
    }
    cout << endl << "Итак, что же вы хотите?" << endl;
    return PlentyOfPoints;
}
//просто ввод точек пока не надоест и предложение вариантов || return vector <CPoint> PlentyOfPoints

void Create(vector <CPoint> PlentyOfPoints, CStorage& Storage)
{
    cout << "Итак, ваше число? ";
    int comand;

    cin >> comand;
    cout << endl;
    switch (comand)
    {
    case 0:
    {
        cout << "Хорошо, да будет так." << endl << "Удачи и хорошего настроения)" << endl;
        throw 0;
    }
    case 1:
        if (PlentyOfPoints.size() == 1) //точечка
        {
            cout << "CPoint" << endl;
            CPoint point(PlentyOfPoints);
            Storage.VPoints.push_back(point);
            point.GetPoint();
            cout << endl;
        }
        else if (PlentyOfPoints.size() >= 2) //ломаная
        {
            cout << "CPolyLine" << endl;
            CPolyLine lieine(PlentyOfPoints);
            Storage.VPolylines.push_back(lieine);
            lieine.GetPolyLine();
            cout << endl;
        }
        else
        {
            cout << "Не известно почему, но по ходу не Самбади..." << endl;
            throw exception("Произошел сбой в команде 1");
        }
    case 2:

        if (PlentyOfPoints.size() > 3) //замкнутая ломаная
        {
            cout << "Ccycle_polyline" << endl;
            Ccycle_polyline lieil(PlentyOfPoints);
            Storage.VCycle_polylines.push_back(lieil);
            lieil.GetCyclePolyLine();
            cout << endl;
        }
        else if (PlentyOfPoints.size() == 3) //треугольник
        {
            cout << "Ctriangle" << endl;
            Ctriangle ABC(PlentyOfPoints);
            Storage.VTriangles.push_back(ABC);
            ABC.GetTriangle();
            /* check for 90 ()
            * (r R)
            */
            cout << endl;
        }
        else
        {
            cout << "Не известно почему, но по ходу не Самбади..." << endl;
            throw exception("Произошел сбой в команде 2");
        }
    case 3:
        if (PlentyOfPoints.size() > 3) //многоугольник
        {
            cout << "Cpolygon" << endl;
            Cpolygon ABCDEF(PlentyOfPoints);
            Storage.VPolygones.push_back(ABCDEF);
            ABCDEF.GetPolygon();
            cout << endl;
        }
        else if (PlentyOfPoints.size() == 3) //правильный треугольник
        {
            cout << "Cclear_polygon" << endl;
            Cclear_polygon clear_ABC(PlentyOfPoints);
            Storage.VClear_polygones.push_back(clear_ABC);
            clear_ABC.GetClearPolygon();
            // (r R)
            cout << endl;
        }
        else
        {
            cout << "Не известно почему, но по ходу не Самбади..." << endl;
            throw exception("Произошел сбой в команде 3");
        }
    case 4:
    {
        if (PlentyOfPoints.size() > 3) //правильный многоугольник
        {
            cout << "Cclear_polygon" << endl;
            Cclear_polygon clear_ABCDEF(PlentyOfPoints);
            Storage.VClear_polygones.push_back(clear_ABCDEF);
            clear_ABCDEF.GetClearPolygon();
            //    (r R)
            cout << endl;
        }
        else
        {
            cout << "Не известно почему, но по ходу не Самбади..." << endl;
            throw exception("Произошел сбой в команде 4");
        }
    }
    case 5:
        if (PlentyOfPoints.size() == 4) //трапеция
        {
            cout << "Ctrapezoid" << endl;
            Ctrapezoid VQOW(PlentyOfPoints);
            Storage.VTrapezoids.push_back(VQOW);
            VQOW.GetTrapezoid();
            //    (r R)
            // 90
            cout << endl;
        }
        else
        {
            cout << "Не известно почему, но по ходу не Самбади..." << endl;
            throw exception("Произошел сбой в команде 5");
        }
        case 6:
            if (PlentyOfPoints.size() == 4)
            {
                cout << "Cparallelogram" << endl;
                Cparallelogram ABCD(PlentyOfPoints);
                Storage.Vparallelogrames.push_back(ABCD);
                ABCD.GetParallelogram();
                    //(r R)
                cout << endl;
            }
            else
            {
                cout << "Не известно почему, но по ходу не Самбади..." << endl;
                throw exception("Произошел сбой в команде 6");
            }
        case 7:
            if (PlentyOfPoints.size() == 4)
            {
                cout << "CRhombus" << endl;
                CRhombus ROMB(PlentyOfPoints);
                Storage.VRhombuses.push_back(ROMB);
                ROMB.GetRhombus();
                    //(r R)
                cout << endl;
            }
            else
            {
                cout << "Не известно почему, но по ходу не Самбади..." << endl;
                throw exception("Произошел сбой в команде 7");
            }

    default:
    {
        throw exception("Хочу обратиться к этому Обэмэ: тут беды с башкой, все-го хо-ро - ше-го! ");
    }
    }
}
//throw 0, если не хотим, Обэмэ, если незнакомая команда или соответсвущее куйсам исключения

void AskForAgain(vector <CPoint> PlentyOfPoints)
{
    cout << "Хотите сделать что-нибудь еще разок? (Y/N) ";
    char command;
    cin >> command;
    if ((command == 'Y') || (command == 'y') || (command == 'Н') || (command == 'н'))
    {
        vector <CPoint> PlentyOfPoints = AskForCreate(PlentyOfPoints); //спрашиваем quantity и предлагаем создание
        if ((PlentyOfPoints.size() == 0) || (PlentyOfPoints.size() == -1)) //если quantity немного не такое
        {
            try
            {
                AskForAgain(PlentyOfPoints); //предлагаем заново
            }
            catch (int& ex) //ну а если не хотят, то звершение работы сознания
            {
                if (ex == 0)
                    throw 0; // не хотят - выходим
                else
                    throw exception("Долбаный рот этого казино! Ты кто такой? Ты мне не попадайся на глаза - я тебе кадык вырву.      *за вами выехал Киборг-убийца, последний понедельник живете...*"); //другой символ
            }
        }
    }
    else if ((command == 'N') || (command == 'n') || (command == 'Т') || (command == 'т'))
    {
        cout << "Удачи)"; throw 0;
    }
    else
        throw exception("Долбаный рот этого казино! Ты кто такой? Ты мне не попадайся на глаза - я тебе кадык вырву.      *за вами выехал Киборг-убийца, последний понедельник живете...*");//другой символ
}
//throw 0, если не хотим || ex, если не тот символ

int main()
{
    setlocale(LC_ALL, "Rus");
    CStorage Storage;
    vector <CPoint> PlentyOfPoints;

    cout << "Привет!" << endl;
    cout << "Пока что все работает, вас приветсвует мини-терминал по созданию всяких геометрических штук!)" << endl;
    PlentyOfPoints = AskForCreate(PlentyOfPoints); //вводим все точки и предлагаем создание
    if ((PlentyOfPoints.size() == 0) || (PlentyOfPoints.size() == -1)) //если quantity немного не такое
    {
        try
        {
            AskForAgain(PlentyOfPoints); //предлагаем заново
        }
        catch (int& ex) //ну а если не хотят, то звершение работы сознания
        {
            return 0; // не хотят
        }
        catch (exception& ex) //не тот символ
        {
            cout << ex.what() << endl;
        }
    }

    try
    {
        Create(PlentyOfPoints, Storage); //пытаемся создать
    }
    catch (int& ex) //что-то идет не так
    {
        return 0;
    }
    catch (exception& ex)
    {
        cout << ex.what() << endl;
        try //в других случаях мы предлагаем заново
        {
            AskForAgain(PlentyOfPoints); //предлагаем заново
        }
        catch (int& ex) //ну а если не хотят, то звершение работы сознания
        {
            return 0; // не хотят
        }
        catch (exception& ex) //не тот символ
        {
            cout << ex.what() << endl;
        }
    }


    cout << "Совет: не забывайте мыть руки и соблюдать дистанцию 1,5 метра" << endl;
    cout << "Ricardo Milos гордится вами, вы справились и спасли Джумаджи!" << endl;

    system("pause");
    return 0;
} 
