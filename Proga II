#include <iostream>
#include <vector>
#include <cstdio>
#include <cctype>
#include <utility>
using namespace std;


class CPolynom
{
private:
	vector <double> coefficents_;
public:
	CPolynom() { /*SetPolynom(0);*/ }
	CPolynom(vector <int>& PlentyOfNumbers) { SetPolynom(PlentyOfNumbers); }

	void SetPolynom(vector <int>& PlentyOfNumbers)
	{
		for (unsigned int i = 0; i < PlentyOfNumbers.size(); i++)
		{
			coefficents_[i] = PlentyOfNumbers[i];
		}
	}
	void GetPolynom() { cout << *this; }
	
	CPolynom operator= (const CPolynom& another)
	{
		this->coefficents_ = another.coefficents_;
		return *this;
	}

	CPolynom operator-()
	{
		CPolynom that = *this;
		for (unsigned int i = 0; i < that.coefficents_.size(); i++)
			that.coefficents_[i] = (that.coefficents_[i] * -1);
		return that;
	}
	//унарные должны делать новый объект    ok
	CPolynom operator/ (int den)
	{
		CPolynom that = *this;
		for (int i = 0; i < that.coefficents_.size(); ++i)
			that.coefficents_[i] /= den;
		return that;
	}
	CPolynom operator* (int mult)
	{
		CPolynom that = *this;
		for (int i = 0; i < that.coefficents_.size(); ++i)
			that.coefficents_[i] *= mult;
		return that;
	}

	bool operator== (const CPolynom& another)
	{
		return (this->coefficents_ == another.coefficents_);
	}
	bool operator!= (const CPolynom& another)
	{
		return !(operator==(another));
	}
	//return!!! and size
	CPolynom& operator+= (const CPolynom& another)
	{
		if (another.coefficents_.size() > this->coefficents_.size())
			this->coefficents_.resize(another.coefficents_.size());

		for (int i = 0; another.coefficents_.size(); ++i)
			coefficents_[i] += another.coefficents_[i];
		return *this;		
	}
	CPolynom operator-= (const CPolynom& another)
	{
		if (another.coefficents_.size() > this->coefficents_.size())
			this->coefficents_.resize(another.coefficents_.size());

		for (int i = 0; another.coefficents_.size(); ++i)
			coefficents_[i] -= another.coefficents_[i];
		return *this;
	}
	CPolynom operator*= (const CPolynom& another)
	{
		if (another.coefficents_.size() > this->coefficents_.size())
			this->coefficents_.resize(another.coefficents_.size());

		for (int i = 0; another.coefficents_.size(); ++i)
			coefficents_[i] *= another.coefficents_[i];
		return *this;
	}

	double& operator[] (int i) { return coefficents_[i]; }


	friend ostream& operator<< (ostream& stream, const CPolynom& polynom);
	friend istream& operator>> (istream& stream, CPolynom& polynom);
	friend CPolynom operator+ (CPolynom& lhs, CPolynom& rhs);
	friend CPolynom operator- (CPolynom& lhs, CPolynom& rhs);
	friend CPolynom operator* (CPolynom& lhs, CPolynom& rhs);
	~CPolynom() { coefficents_.clear(); }
};

//через @=
	CPolynom operator+ (CPolynom& lhs, CPolynom& rhs)
	{
		CPolynom that;
		that.coefficents_.resize(max(lhs.coefficents_.size(), rhs.coefficents_.size()));
		if (max(lhs.coefficents_.size(), rhs.coefficents_.size()) == lhs.coefficents_.size())
			rhs.coefficents_.resize(lhs.coefficents_.size());
		if(max(lhs.coefficents_.size(), rhs.coefficents_.size()) == rhs.coefficents_.size())
			lhs.coefficents_.resize(rhs.coefficents_.size());
		for (unsigned int i = 0; i < min(lhs.coefficents_.size(), rhs.coefficents_.size()); ++i)
		{
			that.coefficents_[i] += lhs.coefficents_[i];
			that.coefficents_[i] += rhs.coefficents_[i];
		}
		return that;
	}
	CPolynom operator- (CPolynom& lhs, CPolynom& rhs)
	{
		CPolynom that;
		that.coefficents_.resize(max(lhs.coefficents_.size(), rhs.coefficents_.size()));
		if (max(lhs.coefficents_.size(), rhs.coefficents_.size()) == lhs.coefficents_.size())
			rhs.coefficents_.resize(lhs.coefficents_.size());
		if (max(lhs.coefficents_.size(), rhs.coefficents_.size()) == rhs.coefficents_.size())
			lhs.coefficents_.resize(rhs.coefficents_.size());

		for (unsigned int i = 0; i < min(lhs.coefficents_.size(), rhs.coefficents_.size()); ++i)
			that.coefficents_[i] = lhs.coefficents_[i] - rhs.coefficents_[i];

		return that;
	}
	CPolynom operator* (CPolynom& lhs, CPolynom& rhs)
	{
		CPolynom that;
		that.coefficents_.resize(lhs.coefficents_.size() + rhs.coefficents_.size());
		if (max(lhs.coefficents_.size(), rhs.coefficents_.size()) == lhs.coefficents_.size())
			rhs.coefficents_.resize(lhs.coefficents_.size());
		if (max(lhs.coefficents_.size(), rhs.coefficents_.size()) == rhs.coefficents_.size())
			lhs.coefficents_.resize(rhs.coefficents_.size());

		for (unsigned int i = 0; i < lhs.coefficents_.size(); ++i)
			for (unsigned int k = 0; k < rhs.coefficents_.size(); ++k)
			{
				that.coefficents_[i + k] +=
					(lhs.coefficents_[i] *
					rhs.coefficents_[k]);
			}
		return that;
	}

ostream& operator<< (ostream& stream, const CPolynom& polynom)
{
	for (unsigned int i = polynom.coefficents_.size() - 1; i > 0; --i)
	{
		cout << "(" << polynom.coefficents_[i] << "x^" << i << ") + ";
	}
	cout << "(" << polynom.coefficents_[0] << "x^" << 0 << ")";
	return stream;
}
istream& operator>> (istream& stream, CPolynom& polynom)
{
	int index;
	int extent;
	int maxExtent;
	cin >> maxExtent;
	/*if(!isdigit(maxExtent))
	{
		throw exception("Error: invalid reading max!");
	}*/
	polynom.coefficents_.resize(maxExtent + 1);
	for (int i = 0; i <= maxExtent; i++)
	{
		cin >> extent >> index;
		/*if ((!isdigit(extent)) || (!(isdigit(index))))
		{
			throw exception("Error: invalid reading!");
		}*/
		polynom.coefficents_[extent] = index;
	}
	return stream;
}

int main()
{
	CPolynom Polynom;
	cout << "Enter your polynom: ";
	try { cin >> Polynom; }
	catch (exception& ex) { cout << ex.what(); }
	cout << Polynom;

	cout << endl;
	cout << "- " << -Polynom << endl;

	int num;
	cout << "/ on num " << endl;
	cin >> num;
	cout << endl <<  (Polynom / num) << endl;
	cout << "* on num " << endl;
	cin >> num;
	cout << endl <<  (Polynom * num) << endl;

	cout << "Enter a and b: " << endl;
	CPolynom a;
	CPolynom b;
	cin >> a >> b;
	cout << endl << endl << "==|!= " << (a == b) << "|" << (a != b) << endl;
	cout << "first = a+b:  " << endl; Polynom = a + b; cout << Polynom << endl;
	cout << "first = a-b:  " << endl; Polynom = a - b; cout << Polynom << endl;
	cout << "first = a*b:  " << endl; Polynom = a * b; cout << Polynom << endl;

	return 0;
}

//    5 * x^2 + 6 * x - 100
//    5*x^2 + 6*x - 100
//    5x^2 + 6x - 100}
