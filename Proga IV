#include <iterator>
#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
using namespace std;

//1. all_of - возвращает true, если все элементы диапазона удовлетворяют
//некоторому предикату. Иначе false
template<class TInputIterator, typename TUnaryPredicate>
bool all_of(TInputIterator begin, TInputIterator end, TUnaryPredicate predicate)
{
    for (auto Iterator = begin; Iterator != end; ++Iterator)
        if (!predicate(*Iterator))
            return false;
    return true;
}



//2. any_of - возвращает true, если хотя бы один из элементов диапазона
//удовлетворяет некоторому предикату. Иначе false
bool compare(const int& value) { return value % 2; }
template<class TInputIterator, typename TUnaryPredicate>
bool any_of(TInputIterator begin, TInputIterator end, TUnaryPredicate predicate = compare(*begin))
{
    for (auto Iterator = begin; Iterator != end; ++Iterator)
        if (TUnaryPredicate(*Iterator))
            return true;
    return false;
}



//3. none_of - возвращает true, если все элементы диапазона не удовлетворяют
//некоторому предикату. Иначе false
template<class TInputIterator, typename TUnaryPredicate >
bool none_of(TInputIterator begin, TInputIterator end, TUnaryPredicate predicate)
{
    for (auto Iterator = begin; Iterator != end; ++Iterator)
        if (predicate(*Iterator))
            return false;
    return true;
}


template<class Tvalue> bool is_0(const Tvalue& value) { return value == 0; }
//4. one_of - возвращает true, если ровно один элемент диапазона удовлетворяет
//некоторому предикату. Иначе false
template<class TInputIterator, typename TUnaryPredicate>
bool one_of(TInputIterator begin, TInputIterator end, TUnaryPredicate predicate)
{
    bool status = false;
    for (auto Iterator = begin; Iterator != end; ++Iterator)
        if (predicate(*Iterator))
        {
            if (status == false)
                status = true;
            else
                return false;
        }
    return true;
}


template<class Tvalue> bool greater(const Tvalue& left, const Tvalue& right) { return left < right; }
//5. is_sorted - возвращает true, если все элементы диапазона находятся в
//отсортированном порядке относительно некоторого критерия
template<class TForwardIterator, typename TBinaryPredicate>
bool is_sorted(TForwardIterator begin, TForwardIterator end, TBinaryPredicate predicate = ::greater)
{
    if (begin == end) { return true; }
    for (auto Iterator = begin; Iterator != prev(end, 1); ++Iterator)

        if (predicate(*Iterator, *next(Iterator, 1)))
            continue;
        else 
            return false;
    return true;
}

template<class Tvalue> bool isnt_0(const Tvalue& value) { return value != 0; }
//6. is_partitioned - возвращает true, если в диапазоне есть элемент, делящий все
//элементы на удовлетворяющие и не удовлетворяющие некоторому предикату. Иначе false.
template <class TInputIterator, class TUnaryPredicate>
bool is_partitioned(TInputIterator begin, TInputIterator end, TUnaryPredicate predicate)
{
    while (begin != end && predicate(*begin))
        ++begin;
    //++begin;
    while (begin != end)
    {
        if (predicate(*begin))
            return false;
        ++begin;
    }
    return true;
}



//7. find_not - находит первый элемент, не равный заданному
template<class TInputIterator, typename Tvalue>
TInputIterator find_not(TInputIterator begin, TInputIterator end, Tvalue value = 0)
{
    for (auto Iterator = begin; Iterator != prev(end, 1); ++Iterator)
        if (*Iterator != value)
                return Iterator;
    return end;
}


//8. find_backward - находит первый элемент, равный заданному, с конца
template<class TBidirectionalIterator = std::vector<int>::const_reverse_iterator, typename Tvalue>
TBidirectionalIterator find_backward(TBidirectionalIterator begin, TBidirectionalIterator end, Tvalue value = 0)
{
    if (begin == end) { return end; }
    for (auto Iterator = prev(end, 1); Iterator != begin; --Iterator)
        if (*Iterator == value)
            return Iterator;
    if (*begin == value)
        return begin;
    return end;
}



//9. is_palindrome - возвращает true, если заданная последовательность является
//палиндромом относительно некоторого условия. Иначе false.
template<class TBidirectionalIterator>
bool is_palindrome(TBidirectionalIterator begin, TBidirectionalIterator end)
{
    if (begin == end) { return true; }
    auto left = begin;
    auto right = prev(end, 1);
    while (true)
    {//cравнение с двух сторон аккуратненько
        if (*left != *right)
            return false;

        if(left == right)
            return true;
        ++left;
        if (left == right)
            return true;
        --right;
    }
}


/*******************************************************************************************************************************************/
int main()
{
    vector<int> v{ 5, 5, 5, 5, 7, 8 };
    list<int> li{ 1, 2, 5, 0, 0, 0 };
    list<int> palindrome{ 1, 3, 5, 5, 3, 1 };
    vector<int> reverse{ 1, 2, 100500, 4, 4, 4, 4, 4, };

    cout << "all_of (% 2) with vector: " << ::all_of(v.begin(), v.end(), compare) << endl;
    cout << "any_of (% 2) with vector: " << ::any_of(v.begin(), v.end(), compare) << endl;
    cout << "none_of (% 2) with palindrome: " << ::none_of(palindrome.begin(), palindrome.end(), compare) << endl;
    cout << "one_of (==0) with list: " << ::one_of(li.begin(), li.end(), is_0<int>) << endl;

    cout << "is_sorted (greater) with vector: " << ::is_sorted(v.begin(), v.end(), ::greater<int>) << endl;
    cout << "is_partitioned (==0) with list: " << ::is_partitioned(li.begin(), li.end(), isnt_0<int>) << endl; 
    cout << "find_not(5) with vector: " << *(::find_not(v.begin(), v.end(), 5)) << endl;
    cout << "find_backward(2) with reverse: " << *(::find_backward(reverse.begin(), reverse.end(), 2)) << endl;
    cout << "is_palindrome with the palindrome: " << is_palindrome(palindrome.begin(), palindrome.end()) << endl;
    return 0;
}

